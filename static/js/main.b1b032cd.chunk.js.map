{"version":3,"sources":["components/App.js","index.js"],"names":["App","Component","state","componentDidMount","this","refesh","image","name","setState","text","binary","handleChange","e","target","value","textToBinary","txt","split","map","c","charCodeAt","toString","join","binaryToText","bin","b","String","fromCharCode","parseInt","uploadImage","preventDefault","fr","FileReader","img","Image","file","dataTransfer","files","type","readAsDataURL","alert","onload","event","updateCanvas","readAlpha","getDownload","src","result","err","ctx","refs","canvas","getContext","width","height","drawImage","getImageData","data","reduce","acc","index","startsWith","substring","length","endsWith","writeAlpha","imageData","forEach","datum","digit","putImageData","dl","toDataURL","render","pixels","free","freeColor","color","className","onDrop","onDragEnter","onDragOver","alt","style","rows","cols","onChange","ref","href","download","onClick","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b1b032cd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../styles.css';\r\n\r\nexport default class App extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    this.refesh();\r\n  }\r\n\r\n  refesh(image = '', name = '') {\r\n    this.setState({\r\n      text: '',\r\n      binary: '1011011 1110011 1100101 1100011 1100010 1101111 1011101  1011011 101111 1110011 1100101 1100011 1100010 1101111 1011101',\r\n      image,\r\n      name,\r\n    });\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({\r\n      text: e.target.value,\r\n      binary: this.textToBinary(e.target.value)\r\n    });\r\n  }\r\n\r\n  textToBinary(txt) {\r\n    return `[secbo]${txt}[/secbo]`.split('').map(c => c.charCodeAt(0).toString(2) + ' ').join('');\r\n  }\r\n\r\n  binaryToText(bin) {\r\n    return bin.split(' ').map(b => String.fromCharCode(parseInt(b, 2))).join('');\r\n  }\r\n\r\n  uploadImage(e) {\r\n    e.preventDefault();\r\n    const fr = new FileReader();\r\n    const img = new Image();\r\n\r\n    // Only accept png images and only use the first file if several are dragged.\r\n    const file = e.dataTransfer.files[0];\r\n    if (file.type === \"image/png\") {\r\n        fr.readAsDataURL(file);\r\n    } else {\r\n        alert('Invalid format. Use a PNG image.');\r\n    }\r\n\r\n    fr.onload = event => {\r\n      try {\r\n        img.onload = () => {\r\n          this.refesh(img, file.name);\r\n          this.updateCanvas();\r\n          this.readAlpha();\r\n          this.getDownload();\r\n        }\r\n        img.src = event.target.result;\r\n      } catch (err) {\r\n        alert('File failed to load.');\r\n      }\r\n    }\r\n  }\r\n\r\n  updateCanvas(img) {\r\n    const ctx = this.refs.canvas.getContext('2d');\r\n    ctx.canvas.width = this.state.image.width;\r\n    ctx.canvas.height = this.state.image.height;\r\n    ctx.drawImage(this.state.image, 0, 0);\r\n  }\r\n\r\n  readAlpha() {\r\n    const ctx = this.refs.canvas.getContext('2d');\r\n    const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    const bin = imageData.data.reduce((acc, value, index) => {\r\n      if (index > 0 && (index + 1) % 4 === 0 ) {\r\n        if (value === 253) {\r\n          return acc += ' ';\r\n        }\r\n        if (value === 254) {\r\n          return acc += '1';\r\n        }\r\n        if (value === 255) {\r\n          return acc += '0';\r\n        }\r\n      }\r\n      return acc;\r\n    }, '');\r\n\r\n    const text = this.binaryToText(bin);\r\n\r\n    if (text.startsWith('[secbo]') && text.substring(0, text.length - 1).endsWith('[/secbo]')) {\r\n      this.setState({text: text.substring(7, text.length - 9)});\r\n    }\r\n  }\r\n\r\n  writeAlpha() {\r\n    const ctx = this.refs.canvas.getContext('2d');\r\n    let imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n    if (imageData.data.length / 4 >= this.state.binary.length) {\r\n      // This sets everything to 255, so no need to handle zeroes\r\n      imageData.data.forEach((datum, index) => {\r\n        if (index > 0 && (index + 1) % 4 === 0 ) {\r\n          imageData.data[index] = 255;\r\n        }\r\n      });\r\n\r\n      this.state.binary.split('').forEach((digit, index) => {\r\n        if (digit === '1') {\r\n          imageData.data[(index * 4) + 3] = 254;\r\n        }\r\n\r\n        if (digit === ' ') {\r\n          imageData.data[(index * 4) + 3] = 253;\r\n        }\r\n      });\r\n\r\n      ctx.putImageData(imageData, 0, 0);\r\n      this.getDownload();\r\n    } else {\r\n      alert('The image was too small to contain all this data.');\r\n    }\r\n  }\r\n\r\n  getDownload() {\r\n    this.setState({dl: this.refs.canvas.toDataURL(\"image/png\")});\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.binary) return <p>loading...</p>;\r\n\r\n    const pixels = this.state.image.width * this.state.image.height;\r\n    const free = pixels - this.state.binary.length;\r\n    const freeColor = {};\r\n    if (free < 0) {\r\n      freeColor.color = 'red';\r\n    } else {\r\n      freeColor.color = 'black';\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <h2>SecBO</h2>\r\n        <div className=\"ImageUploader\"\r\n          onDrop={(e) => { this.uploadImage(e); }}\r\n          onDragEnter={(e) => {e.preventDefault();}}\r\n          onDragOver={(e) => {e.preventDefault();}}\r\n        >\r\n        {\r\n          this.state.image\r\n            ?\r\n              <img\r\n                className=\"ImagePreview\"\r\n                src={this.state.image.src}\r\n                alt=\"thumbnail\"\r\n              />\r\n            :\r\n              <span>drag an image file here</span>\r\n        }\r\n        </div>\r\n        <div className=\"Info\">\r\n          { this.state.image && `${pixels} total pixels, ` }\r\n          <span style={freeColor}>\r\n            { this.state.image && `${free} still available` }\r\n          </span>\r\n        </div>\r\n        <textarea rows=\"15\" cols=\"50\"\r\n          value={ this.state.text }\r\n          onChange={(e) => { this.handleChange(e); }}>\r\n        </textarea>\r\n        <br />\r\n        <canvas ref=\"canvas\"></canvas>\r\n        <br />\r\n        {\r\n          this.state.text.length > 0\r\n          && this.state.image.src\r\n          && free >= 0\r\n          && <a\r\n            href={this.state.dl}\r\n            download={this.state.name}\r\n            onClick={() => { this.writeAlpha(); }}\r\n          >download\r\n          </a>\r\n        }\r\n        {\r\n          this.state.image.src\r\n          && <button onClick={() => {this.refesh(); }}>clear</button>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}